Version 1
SubGoalCombiner SGC_AND
INITSECTION

KBSECTION
IF
TextEvent("ppmdata")
AND
DB_PartyMembers(_Character)
AND
DB_PPMeter_DataReal(_Character, _Lifetime, _StatsName, _Value)
AND
Concatenate(_Lifetime, ", ", _msg1)
AND
Concatenate(_msg1, _StatsName, _msg2)
AND
Concatenate(_msg2, ", ", _msg3)
AND
ConcatenateReal(_msg3, _Value, _msg)
THEN
DebugText(_Character, _msg);

IF
TextEvent("ppmeventscounter")
AND
DB_PartyMembers(_Character)
AND
DB_PPMeter_EventsCounter(_Character, _Value)
AND
ConcatenateInteger("EventsCounter: ", _Value, _msg)
THEN
DebugText(_Character, _msg);

IF
TextEvent("ppmprevioushp")
AND
DB_PartyMembers(_Character)
AND
DB_PPMeter_PreviousHP(_Character, _HP)
AND
ConcatenateInteger("PreviousHP: ", _HP, _msg)
THEN
DebugText(_Character, _msg);

/*IF
TextEvent("ppmremoveboosts")
AND
DB_PartyMembers(_Character)
THEN
PROC_PPMeter_ForceClearActionResourceBoosts(_Character);
DebugText(_Character, "Calling PROC_PPMeter_ForceClearActionResourceBoosts");*/


IF
TextEvent("ppmboosts")
AND
DB_PartyMembers(_Character)
THEN
DebugText(_Character, "ppmboosts called");

IF
TextEvent("ppmboosts")
AND
DB_PartyMembers(_Character)
AND
DB_PPMeter_ResourceNames(_ResourceName, _, _)
AND
GetActionResourceValuePersonal(_Character, _ResourceName, 0, _Value)
AND
Concatenate(_ResourceName, ": ", _msg1)
AND
ConcatenateReal(_msg1, _Value, _msg)
THEN
DebugText(_Character, _msg);


IF
TextEvent("ppmdbboosts")
AND
DB_PartyMembers(_Character)
THEN
DebugText(_Character, "ppmdbboosts called");

IF
TextEvent("ppmdbboosts")
AND
DB_PartyMembers(_Character)
AND
DB_PPMeter_CurrentResourceBoost(_Character, _, _, _, _BoostStr)
THEN
DebugText(_Character, _BoostStr);


/*
IF
TextEvent("healevents")
AND
DB_PPMeter_HealEvents(_Character, _Value, _Counter)
AND
ConcatenateInteger("Heal val: ", _Value, _msg1)
AND
Concatenate(_msg1, " Counter: ", _msg2)
AND
ConcatenateInteger(_msg2, _Counter, _msg)
THEN
DebugText(_Character, _msg);

IF
TextEvent("healeventtimers")
AND
DB_PPMeter_HealEventTimers(_Character, _TimerStr, _)
THEN
DebugText(_Character, _TimerStr);

IF
TextEvent("gethp")
AND
DB_PartyMembers(_Character)
AND
GetHitpoints(_Character, _HP)
AND
ConcatenateInteger("GetHitpoints() result: ", _HP, _msg)
THEN
DebugText(_Character, _msg);
//END_REGION
*/

/*//REGION // PROC_PPMeter_ForceClearActionResourceBoosts  TODO: does not work?
PROC
PROC_PPMeter_ForceClearActionResourceBoosts((CHARACTER)_Character)
AND
DB_PPMeter_ResourceNames(_ResourceName, _StatsType, _Lifetime)
AND
GetActionResourceValuePersonal(_Character, _ResourceName, 0, _Value)
AND
RealToString(_Value, _NumberStr)
AND
Concatenate("ActionResource(", _ResourceName, _str1)
AND
Concatenate(_str1, ",", _str2)
AND
Concatenate(_str2, _NumberStr, _str3)
AND
Concatenate(_str3, ",0)", _BoostStr)
THEN
RemoveBoosts(_Character, _BoostStr, 0, "", _Character);
//END_REGION*/


/*
//REGION // PROC_FillZeroes - inits DB_PPMeter_DataReal if there is no data
PROC
PROC_FillZeroes((CHARACTER)_Character)
AND
DB_PPMeter_StatsType(_StatsType)
AND
DB_PPMeter_Lifetime(_Lifetime)
AND
NOT DB_PPMeter_DataReal(_Character, _Lifetime, _StatsType, _)
THEN
DB_PPMeter_DataReal(_Character, _Lifetime, _StatsType, 0.0);
//DebugText(_Character, "Fill zeros call!");
//END_REGION


//REGION // PROC_PPMeter_ReplaceInDB - write a value to DB and remove old value.
PROC
PROC_PPMeter_ReplaceInDB((CHARACTER)_Character, (STRING)_Lifetime, (STRING)_StatsName, (REAL)_NewValue)
AND
DB_PPMeter_DataReal(_Character, _Lifetime, _StatsName, _OldValue)
THEN
NOT DB_PPMeter_DataReal(_Character, _Lifetime, _StatsName, _OldValue); // remove old value

PROC
PROC_PPMeter_ReplaceInDB((CHARACTER)_Character, (STRING)_Lifetime, (STRING)_StatsName, (REAL)_NewValue)
THEN
DB_PPMeter_DataReal(_Character, _Lifetime, _StatsName, _NewValue); // write new value
//END_REGION


//REGION // PROC_PPMeterAdd - does _Value += _NewValue
PROC
PROC_PPMeterAdd((CHARACTER)_Character, (STRING)_Lifetime, (STRING)_StatsName, (REAL)_Value)
AND
DB_PPMeter_DataReal(_Character, _Lifetime, _StatsName, _OldValue)
AND
RealSum(_OldValue, _Value, _NewValue)
THEN
PROC_PPMeter_ReplaceInDB(_Character, _Lifetime, _StatsName, _NewValue);
//END_REGION


//REGION // PROC_PPMeter_InitializePreviousHPAndHealEventCounter
// Set previous HP if it's not set
PROC
PROC_PPMeter_InitializePreviousHPAndHealEventCounter()
AND
DB_PartyMembers(_Character)
AND
NOT DB_PPMeter_PreviousHP(_Character, _)
AND
GetHitpoints(_Character, _HP)
THEN
DB_PPMeter_PreviousHP(_Character, _HP);

// Initialize heal events counter by 0 if there are no counter records
PROC
PROC_PPMeter_InitializePreviousHPAndHealEventCounter()
AND
DB_PartyMembers(_Character)
AND
NOT DB_PPMeter_EventsCounter(_Character, _)
THEN
DB_PPMeter_EventsCounter(_Character, 0);
//END_REGION


//REGION // Rule:  Refresh calculated stats (see DB_PPMeter_CalculatedStats list)
IF
DB_PartyMembers(_Character)
AND
DB_PPMeter_CalculatedStats(_SourceStat, _TargetStat)
AND
DB_PPMeter_DataReal(_Character, _Lifetime, "RoundsCount", _Rounds)
AND
DB_PPMeter_DataReal(_Character, _Lifetime, _SourceStat, _SourceValue)
AND
_Rounds > 0.0
AND
RealDivide(_SourceValue, _Rounds, _TargetValue)
THEN
PROC_PPMeter_ReplaceInDB(_Character, _Lifetime, _TargetStat, _TargetValue);
//END_REGION


//REGION // Rule: Update UI damage(set action resource boosts) - looking if DB changed
IF
DB_PPMeter_DataReal(_Character, _LifeTime, _StatsType, _Value)
THEN
PROC_PPMeter_UpdateUI();

PROC
PROC_PPMeter_UpdateUI()
AND
DB_PPMeter_DataReal(_Character, _LifeTime, _StatsType, _Value)
THEN
PROC_PPMeter_WriteResource(_Character, _StatsType, _LifeTime, _Value);
//END_REGION


//REGION store actual HP value on HitpointsChanged and handle hp change
IF
HitpointsChanged((CHARACTER)_Character, _)
THEN
PROC_PPMeter_ProcessHPChanged(_Character);

IF
ShapeshiftedHitpointsChanged((CHARACTER)_Character, _)
THEN
PROC_PPMeter_ProcessHPChanged(_Character);
//END_REGION


//REGION // PROC_PPMeter_ProcessHPChanged, PROC_PPMeter_ProcessHPChange, PROC_PPMeter_WriteHealEvent, PROC_PPMeter_WriteHealEventWithCounter
PROC
PROC_PPMeter_ProcessHPChanged((CHARACTER)_Character)
AND
DB_PartyMembers(_Character)
AND
GetHitpoints(_Character, _HPCurrent)
THEN
PROC_PPMeter_ProcessHPChange(_Character, _HPCurrent);

PROC
PROC_PPMeter_ProcessHPChange((CHARACTER)_Character, (INTEGER)_HPCurrent)
AND
DB_PPMeter_PreviousHP(_Character, _HPPrev)
AND
IntegerSubtract(_HPCurrent, _HPPrev, _DiffHP)
AND
_DiffHP > 0
THEN
PROC_PPMeter_WriteHealEvent(_Character, _DiffHP);
//DebugText(_Character, _msg);

PROC
PROC_PPMeter_ProcessHPChange((CHARACTER)_Character, (INTEGER)_HPCurrent)
AND
DB_PPMeter_PreviousHP(_Character, _HPPrev)
THEN
NOT DB_PPMeter_PreviousHP(_Character, _HPPrev);

PROC
PROC_PPMeter_ProcessHPChange((CHARACTER)_Character, (INTEGER)_HPCurrent)
THEN
DB_PPMeter_PreviousHP(_Character, _HPCurrent);

// Increase counter and write heal event with it
PROC
PROC_PPMeter_WriteHealEvent((CHARACTER)_Character, (INTEGER)_DiffHP)
AND
DB_PPMeter_EventsCounter(_Character, _CurrentCounter)
AND
QRY_PPMeterIsHighgestCounter(_Character, _CurrentCounter)  // Filter counters because we add new first and only then remove second
AND
IntegerSum(_CurrentCounter, 1, _NewCounter)
THEN
PROC_PPMeter_WriteHealEventWithCounter(_Character, _DiffHP, _CurrentCounter, _NewCounter);

PROC
PROC_PPMeter_WriteHealEventWithCounter((CHARACTER)_Character, (INTEGER)_HP, (INTEGER)_CurrentCounter, (INTEGER)_NewCounter)
THEN
DB_PPMeter_HealEvents(_Character, _HP, _NewCounter);
DB_PPMeter_EventsCounter(_Character, _NewCounter);

PROC
PROC_PPMeter_WriteHealEventWithCounter((CHARACTER)_Character, (INTEGER)_HP, (INTEGER)_CurrentCounter, (INTEGER)_NewCounter)
THEN
NOT DB_PPMeter_EventsCounter(_Character, _CurrentCounter);

// Set lifetime timer to eliminate this event if no HEAL status matched in given time
PROC
PROC_PPMeter_WriteHealEventWithCounter((CHARACTER)_Character, (INTEGER)_HP, (INTEGER)_CurrentCounter, (INTEGER)_NewCounter)
AND
ConcatenateGUID("heal_event_timer", _Character, _str1)
AND
ConcatenateInteger(_str1, _NewCounter, _str)
AND
DB_PPMeter_HealEventTimerValueMs(_TimerValueMs)
THEN
TimerLaunch(_str, _TimerValueMs);
DB_PPMeter_HealEventTimers(_Character, _str, _NewCounter);

IF
TimerFinished(_TimerString)
AND
DB_PPMeter_HealEventTimers(_Character, _TimerString, _EventID)
AND
DB_PPMeter_HealEvents(_Character, _HP, _EventID)
THEN
NOT DB_PPMeter_HealEvents(_Character, _HP, _EventID);

// Remove additional timer info in any case
IF
TimerFinished(_TimerString)
AND
DB_PPMeter_HealEventTimers(_Character, _TimerString, _EventID)
THEN
NOT DB_PPMeter_HealEventTimers(_Character, _TimerString, _EventID);
//END_REGION


//REGION // Queries
QRY
QRY_PPMeterIsHighgestCounter((CHARACTER)_Character, (INTEGER)_ValueToCheck)
AND
DB_PPMeter_EventsCounter(_Character, _Value)
AND
_ValueToCheck >= _Value
THEN
DB_NOOP(1);

QRY
QRY_PPMeterIsEarliestHealEvent((CHARACTER)_Character, (INTEGER)_EventIDToCheck)
AND
DB_PPMeter_HealEvents(_Character, _, _EventID)
AND
_EventIDToCheck <= _EventID
THEN
DB_NOOP(1);
//END_REGION
*/
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "Start"
