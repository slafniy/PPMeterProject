Version 1
SubGoalCombiner SGC_AND
INITSECTION
// PPMeter mod by slafniy
// An attempt to re-create Recount :) kinda...


// Data Lifetime enum
DB_PPMeter_Lifetime("Combat");
DB_PPMeter_Lifetime("Day");
DB_PPMeter_Lifetime("Level");
DB_PPMeter_Lifetime("Overall");

// Data stats type enum
DB_PPMeter_StatsType("Damage");
DB_PPMeter_StatsType("RoundsCount");
DB_PPMeter_StatsType("DPR");
DB_PPMeter_StatsType("DamageTaken");
DB_PPMeter_StatsType("DTPR");

// REAL Tables DB_PPMeter_DataReal (CHARACTER)_Character, (STRING)_Lifetime, (STRING)_StatsType, (REAL)_Value


KBSECTION
//REGION // PROC_FillZeroes - if no data in DB
PROC
PROC_FillZeroes((CHARACTER)_Character)
AND
DB_PPMeter_StatsType(_StatsType)
AND
DB_PPMeter_Lifetime(_Lifetime)
AND
NOT DB_PPMeter_DataReal(_Character, _Lifetime, _StatsType, _)
THEN
DB_PPMeter_DataReal(_Character, _Lifetime, _StatsType, 0.0);
//END_REGION


//REGION // Fill zeros for player - only once
IF
DB_PartyMembers(_Character)
AND
IsPlayer(_Character, 1)
AND
GUIDToString(_Character, _onlyOnceStr1)
AND
DB_PPMeter_StatsType(_StatsType)
AND
DB_PPMeter_Lifetime(_Lifetime)
AND
Concatenate(_onlyOnceStr1, _StatsType, _onlyOnceStr2)
AND
Concatenate(_onlyOnceStr2, _Lifetime, _onlyOnceStr)
AND
QRY_OnlyOnce(_onlyOnceStr)
AND
NOT DB_PPMeter_DataReal(_Character, _Lifetime, _StatsType, _)
THEN
DB_PPMeter_DataReal(_Character, _Lifetime, _StatsType, 0.0);
//END_REGION


//REGION // handle joined party - fill zeros
IF
CharacterJoinedParty(_Character)
THEN
PROC_FillZeroes(_Character);
//END_REGION


//REGION On new combat - fill zeros if needed and reset per-combat stats for each StatsType
IF
EnteredCombat((CHARACTER)_Character, _)
THEN
PROC_FillZeroes(_Character);

IF
EnteredCombat((CHARACTER)_Character, _)
AND
DB_PartyMembers(_Character)
AND
DB_PPMeter_StatsType(_StatsName)
AND
Concatenate("Reset ", _StatsName, _msg)
THEN
PROC_PPMeter_ReplaceInDB(_Character, "Combat", _StatsName, 0.0);
//END_REGION


//REGION On leveled up - reset per Level stats
IF
LeveledUp((CHARACTER)_Character)
AND
DB_PartyMembers(_Character)
AND
DB_PPMeter_StatsType(_StatsName)
THEN
PROC_PPMeter_ReplaceInDB(_Character, "Level", _StatsName, 0.0);
//END_REGION


//REGION Handle turn end - count rounds
// Note: cannot count on round start because it races with EnteredCombat event in case if player joined to existing fight
IF
TurnEnded((CHARACTER)_Character)  // Round == Turn in case of each character I suppose
AND
DB_PartyMembers(_Character)
AND
DB_PPMeter_Lifetime(_Lifetime)
THEN
PROC_PPMeterAdd(_Character, _Lifetime, "RoundsCount", 1.0);
//END_REGION


//REGION Handle damage dealt
IF
AttackedBy((GUIDSTRING)_Defender, (CHARACTER)_AttackerOwner, (GUIDSTRING)_Attacker, (STRING)_DamageType, (INTEGER)_DamageAmount, (STRING)_DamageCause, (INTEGER)_StoryActionID)
AND
DB_PartyMembers(_AttackerOwner)
AND
_DamageAmount > 0.0
AND
IsEnemy(_AttackerOwner, (CHARACTER)_Defender, 1)
AND
DB_PPMeter_Lifetime(_Lifetime)  // Apply damage to every lifetime
AND
IntegerToReal(_DamageAmount, _DamageAmountReal)
THEN
PROC_PPMeterAdd(_AttackerOwner, _Lifetime, "Damage", _DamageAmountReal);
//END_REGION


//REGION Handle damage taken
IF
AttackedBy((GUIDSTRING)_Defender, (CHARACTER)_AttackerOwner, (GUIDSTRING)_Attacker, (STRING)_DamageType, (INTEGER)_DamageAmount, (STRING)_DamageCause, (INTEGER)_StoryActionID)
AND
DB_PartyMembers((CHARACTER)_Defender)
AND
_DamageAmount > 0.0
AND
IsEnemy((CHARACTER)_Defender, _AttackerOwner, 1)
AND
DB_PPMeter_Lifetime(_Lifetime)  // Apply damage taken to every lifetime
AND
IntegerToReal(_DamageAmount, _DamageAmountReal)
THEN
PROC_PPMeterAdd((CHARACTER)_Defender, _Lifetime, "DamageTaken", _DamageAmountReal);
//END_REGION


//REGION Handle healing applied
IF
StatusApplied((CHARACTER)_Target, _Status, (CHARACTER)_Caster, _)
AND
DB_PartyMembers(_Target)
AND
DB_PartyMembers(_Caster)
AND
_Status == "PPMETER_HEALING_APPLIED"
AND
GetStatusTurns(_Target, "PPMETER_HEALING_APPLIED", _Stacks)
AND
ConcatenateInteger("Got ", _Stacks, _msg1)
AND
Concatenate(_msg1, " healing from ", _msg2)
AND
ConcatenateGUID(_msg2, _Caster, _msg)
THEN
DebugText(_Target, _msg);
//END_REGION


//REGION On Long Rest
IF
LongRestFinished()
AND
DB_PartOfTheTeam(_Character)  // not DB_PartyMembers because we want to handle camp fellas too
AND
DB_PPMeter_StatsType(_StatsName)
THEN
PROC_PPMeter_ReplaceInDB(_Character, "Day", _StatsName, 0.0);
PROC_PPMeter_ForseUpdateStatuses(_Character);  // Because LongRest resets statuses
//END_REGION


//REGION // Refresh DPR and DTPR
IF
DB_PartyMembers(_Character)
AND
DB_PPMeter_DataReal(_Character, _Lifetime, "RoundsCount", _Rounds)
AND
DB_PPMeter_DataReal(_Character, _Lifetime, "Damage", _Damage)
AND
_Rounds > 0.0
AND
RealDivide(_Damage, _Rounds, _DPR)
THEN
PROC_PPMeter_ReplaceInDB(_Character, _Lifetime, "DPR", _DPR);

IF
DB_PartyMembers(_Character)
AND
DB_PPMeter_DataReal(_Character, _Lifetime, "RoundsCount", _Rounds)
AND
DB_PPMeter_DataReal(_Character, _Lifetime, "DamageTaken", _DamageTaken)
AND
_Rounds > 0.0
AND
RealDivide(_DamageTaken, _Rounds, _DTPR)
THEN
PROC_PPMeter_ReplaceInDB(_Character, _Lifetime, "DTPR", _DTPR);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "Start"
