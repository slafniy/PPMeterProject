Version 1
SubGoalCombiner SGC_AND
INITSECTION
// Data Lifetime enum
DB_PPMeter_Lifetime("Combat");
DB_PPMeter_Lifetime("Day");
DB_PPMeter_Lifetime("Level");
DB_PPMeter_Lifetime("Overall");

// Data stats type enum
DB_PPMeter_StatsType("RoundsCount");
DB_PPMeter_StatsType("Damage");
DB_PPMeter_StatsType("DPR");
DB_PPMeter_StatsType("DamageTaken");
DB_PPMeter_StatsType("DTPR");
DB_PPMeter_StatsType("Healing");
DB_PPMeter_StatsType("HPR");
DB_PPMeter_StatsType("HealingTaken");
DB_PPMeter_StatsType("HTPR");
DB_PPMeter_StatsType("HealingSelf");
DB_PPMeter_StatsType("SHPR");

// Stats which should be calculated "per round avg"
// StatsTypeSource - StatsTypeTarget
DB_PPMeter_CalculatedStats("Damage", "DPR");
DB_PPMeter_CalculatedStats("DamageTaken", "DTPR");
DB_PPMeter_CalculatedStats("Healing", "HPR");
DB_PPMeter_CalculatedStats("HealingTaken", "HTPR");
DB_PPMeter_CalculatedStats("HealingSelf", "SHPR");


// Mapping to Resource Name (names are declared in Mods/PPMeter_d2481ff8-5c74-cd1c-8709-6d8314bd1c30/Localization/English/PPMeterTechnicalStrings.loca.xml)
// ResourceName - StatsType - Lifetime
DB_PPMeter_ResourceNames("PPMeterCombatRounds", "RoundsCount", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayRounds", "RoundsCount", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelRounds", "RoundsCount", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallRounds", "RoundsCount", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatDamage", "Damage", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayDamage", "Damage", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelDamage", "Damage", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallDamage", "Damage", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatDPR", "DPR", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayDPR", "DPR", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelDPR", "DPR", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallDPR", "DPR", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatDamageTaken", "DamageTaken", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayDamageTaken", "DamageTaken", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelDamageTaken", "DamageTaken", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallDamageTaken", "DamageTaken", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatDTPR", "DTPR", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayDTPR", "DTPR", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelDTPR", "DTPR", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallDTPR", "DTPR", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatHealing", "Healing", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayHealing", "Healing", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelHealing", "Healing", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallHealing", "Healing", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatHPR", "HPR", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayHPR", "HPR", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelHPR", "HPR", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallHPR", "HPR", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatHealingTaken", "HealingTaken", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayHealingTaken", "HealingTaken", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelHealingTaken", "HealingTaken", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallHealingTaken", "HealingTaken", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatHTPR", "HTPR", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayHTPR", "HTPR", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelHTPR", "HTPR", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallHTPR", "HTPR", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatHealingSelf", "HealingSelf", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayHealingSelf", "HealingSelf", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelHealingSelf", "HealingSelf", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallHealingSelf", "HealingSelf", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatSHPR", "SHPR", "Combat");
DB_PPMeter_ResourceNames("PPMeterDaySHPR", "SHPR", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelSHPR", "SHPR", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallSHPR", "SHPR", "Overall");


// REAL Tables format: (CHARACTER)_Character, (STRING)_Lifetime, (STRING)_StatsType, (REAL)_Value
NOT DB_PPMeter_DataReal((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, "", "", 0.0);

// Simple counter to compare events to figure out which one is the first
NOT DB_PPMeter_EventsCounter((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, 0);

// Store HitpointsChanged events which INCREASED hp (drop HP loss!) to match them with HEAL status later.
// Character - HealValue - EventID
NOT DB_PPMeter_HealEvents((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, 0, 0);

// Store previous HP value to figure out if character healed
// Character - HP
NOT DB_PPMeter_PreviousHP((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, 0);

// Timer events list
// character - timer string - event id
NOT DB_PPMeter_HealEventTimers((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, "", 0);

// Timer value, ms - max allowed delay between actual HP increase and matching HEAL status
DB_PPMeter_HealEventTimerValueMs(100);

// Save current resource boost to be able to remove it
// Character - ResourceName - BoostString
NOT DB_PPMeter_CurrentResourceBoost((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, "", "");


KBSECTION

//REGION // Refresh calculated stats (see DB_PPMeter_CalculatedStats list)
IF
DB_PartyMembers(_Character)
AND
DB_PPMeter_CalculatedStats(_SourceStat, _TargetStat)
AND
DB_PPMeter_DataReal(_Character, _Lifetime, "RoundsCount", _Rounds)
AND
DB_PPMeter_DataReal(_Character, _Lifetime, _SourceStat, _SourceValue)
AND
_Rounds > 0.0
AND
RealDivide(_SourceValue, _Rounds, _TargetValue)
THEN
PROC_PPMeter_ReplaceInDB(_Character, _Lifetime, _TargetStat, _TargetValue);
//END_REGION

//REGION Write data to resource
// Clear old boost first!
PROC
PROC_PPMeter_WriteResource((CHARACTER)_Character, (STRING)_StatsType, (STRING)_Lifetime, (REAL)_Number)
AND
DB_PPMeter_ResourceNames(_ResourceName, _StatsType, _Lifetime)
AND
DB_PPMeter_CurrentResourceBoost(_Character, _ResourceName, _BoostString)
THEN
RemoveBoosts(_Character, _BoostString, 0, "", _Character);
NOT DB_PPMeter_CurrentResourceBoost(_Character, _ResourceName, _BoostString);

// Construct new boost string and apply it
PROC
PROC_PPMeter_WriteResource((CHARACTER)_Character, (STRING)_StatsType, (STRING)_Lifetime, (REAL)_Number)
AND
RealToString(_Number, _NumberStr)
AND
DB_PPMeter_ResourceNames(_ResourceName, _StatsType, _Lifetime)
AND
Concatenate("ActionResource(", _ResourceName, _str1)
AND
Concatenate(_str1, ",", _str2)
AND
Concatenate(_str2, _NumberStr, _str3)
AND
Concatenate(_str3, ",0)", _BoostStr)
THEN
DB_PPMeter_CurrentResourceBoost(_Character, _ResourceName, _BoostStr);
AddBoosts(_Character, _BoostStr, "", _Character);
//END_REGION


//REGION Update UI damage(set statuses) - looking if DB changed
IF
DB_PartyMembers(_Character)
AND
DB_PPMeter_DataReal(_Character, _LifeTime, _StatsType, _Value)
THEN
PROC_PPMeter_WriteResource(_Character, _StatsType, _LifeTime, _Value);
//END_REGION

//REGION // PROC Force apply damage UI statuses
PROC
PROC_PPMeter_ForseUpdateStatuses((CHARACTER)_Character)
AND
DB_PPMeter_DataReal(_Character, _LifeTime, _StatsType, _Value)
THEN
PROC_PPMeter_WriteResource(_Character, _StatsType, _LifeTime, _Value);
//END_REGION

//REGION // PROC_FillZeroes - if no data in DB
PROC
PROC_FillZeroes((CHARACTER)_Character)
AND
DB_PPMeter_StatsType(_StatsType)
AND
DB_PPMeter_Lifetime(_Lifetime)
AND
NOT DB_PPMeter_DataReal(_Character, _Lifetime, _StatsType, _)
THEN
DB_PPMeter_DataReal(_Character, _Lifetime, _StatsType, 0.0);
//DebugText(_Character, "Fill zeros call!");
//END_REGION


//REGION PROC_PPMeter_ReplaceInDB // write a value to DB and remove old value.
PROC
PROC_PPMeter_ReplaceInDB((CHARACTER)_Character, (STRING)_Lifetime, (STRING)_StatsName, (REAL)_NewValue)
AND
DB_PPMeter_DataReal(_Character, _Lifetime, _StatsName, _OldValue)
THEN
NOT DB_PPMeter_DataReal(_Character, _Lifetime, _StatsName, _OldValue); // remove old value

PROC
PROC_PPMeter_ReplaceInDB((CHARACTER)_Character, (STRING)_Lifetime, (STRING)_StatsName, (REAL)_NewValue)
THEN
DB_PPMeter_DataReal(_Character, _Lifetime, _StatsName, _NewValue); // write new value
//END_REGION


//REGION PROC_PPMeterAdd // _Value += _NewValue
PROC
PROC_PPMeterAdd((CHARACTER)_Character, (STRING)_Lifetime, (STRING)_StatsName, (REAL)_Value)
AND
DB_PPMeter_DataReal(_Character, _Lifetime, _StatsName, _OldValue)
AND
RealSum(_OldValue, _Value, _NewValue)
THEN
PROC_PPMeter_ReplaceInDB(_Character, _Lifetime, _StatsName, _NewValue);
//END_REGION

/*
//REGION // PROC_PPMeter_RefreshCalculatedStats - refresh calculated stats (see DB_PPMeter_CalculatedStats list)
PROC
PROC_PPMeter_RefreshCalculatedStats((CHARACTER)_Character, (STRING)_Lifetime, (STRING)_StatsName)
AND
DB_PPMeter_CalculatedStats(_StatsName, _TargetStat)
AND
DB_PPMeter_DataReal(_Character, _Lifetime, "RoundsCount", _Rounds)
AND
DB_PPMeter_DataReal(_Character, _Lifetime, _SourceStat, _SourceValue)
AND
_Rounds > 0.0
AND
RealDivide(_SourceValue, _Rounds, _TargetValue)
THEN
PROC_PPMeter_ReplaceInDB(_Character, _Lifetime, _TargetStat, _TargetValue);
//END_REGION*/


//REGION
IF
TextEvent("ppmdata")
AND
DB_PartyMembers(_Character)
AND
DB_PPMeter_DataReal(_Character, _Lifetime, _StatsName, _Value)
AND
Concatenate(_Lifetime, ", ", _msg1)
AND
Concatenate(_msg1, _StatsName, _msg2)
AND
Concatenate(_msg2, ", ", _msg3)
AND
ConcatenateReal(_msg3, _Value, _msg)
THEN
DebugText(_Character, _msg);
//END_REGION

//REGION handle level start - fill zeroes if needed
IF
LevelGameplayStarted(_, _)
AND
DB_PartyMembers(_Character)
THEN
PROC_FillZeroes(_Character);
//END_REGION


//REGION // handle joined party - fill zeros
IF
CharacterJoinedParty(_Character)
THEN
PROC_FillZeroes(_Character);
//END_REGION


//REGION On new combat - fill zeros if needed and reset per-combat stats for each StatsType
IF
EnteredCombat((CHARACTER)_Character, _)
THEN
PROC_FillZeroes(_Character);

IF
EnteredCombat((CHARACTER)_Character, _)
AND
DB_PartyMembers(_Character)
AND
DB_PPMeter_StatsType(_StatsName)
THEN
PROC_PPMeter_ReplaceInDB(_Character, "Combat", _StatsName, 0.0);
//END_REGION


//REGION On leveled up - reset per Level stats
IF
LeveledUp((CHARACTER)_Character)
AND
DB_PartyMembers(_Character)
AND
DB_PPMeter_StatsType(_StatsName)
THEN
PROC_PPMeter_ReplaceInDB(_Character, "Level", _StatsName, 0.0);
//END_REGION


//REGION Handle turn end - count rounds
// Note: cannot count on round start because it races with EnteredCombat event in case if player joined to existing fight
IF
TurnEnded((CHARACTER)_Character)  // Round == Turn in case of each character I suppose
AND
DB_PartyMembers(_Character)
AND
DB_PPMeter_Lifetime(_Lifetime)
THEN
PROC_PPMeterAdd(_Character, _Lifetime, "RoundsCount", 1.0);
//END_REGION


//REGION Handle damage dealt
IF
AttackedBy((GUIDSTRING)_Defender, (CHARACTER)_AttackerOwner, (GUIDSTRING)_Attacker, (STRING)_DamageType, (INTEGER)_DamageAmount, (STRING)_DamageCause, (INTEGER)_StoryActionID)
AND
DB_PartyMembers(_AttackerOwner)
AND
_DamageAmount > 0.0
AND
IsEnemy(_AttackerOwner, (CHARACTER)_Defender, 1)
AND
DB_PPMeter_Lifetime(_Lifetime)  // Apply damage to every lifetime
AND
IntegerToReal(_DamageAmount, _DamageAmountReal)
THEN
PROC_PPMeterAdd(_AttackerOwner, _Lifetime, "Damage", _DamageAmountReal);
//END_REGION


//REGION Handle damage taken
IF
AttackedBy((GUIDSTRING)_Defender, (CHARACTER)_AttackerOwner, (GUIDSTRING)_Attacker, (STRING)_DamageType, (INTEGER)_DamageAmount, (STRING)_DamageCause, (INTEGER)_StoryActionID)
AND
DB_PartyMembers((CHARACTER)_Defender)
AND
_DamageAmount > 0.0
AND
IsEnemy((CHARACTER)_Defender, _AttackerOwner, 1)
AND
DB_PPMeter_Lifetime(_Lifetime)  // Apply damage taken to every lifetime
AND
IntegerToReal(_DamageAmount, _DamageAmountReal)
THEN
PROC_PPMeterAdd((CHARACTER)_Defender, _Lifetime, "DamageTaken", _DamageAmountReal);
//END_REGION


//REGION On Long Rest
IF
LongRestFinished()
AND
DB_PartOfTheTeam(_Character)  // not DB_PartyMembers because we want to handle camp fellas too
AND
DB_PPMeter_StatsType(_StatsName)
THEN
PROC_PPMeter_ReplaceInDB(_Character, "Day", _StatsName, 0.0);
PROC_PPMeter_ForseUpdateStatuses(_Character);  // Because LongRest resets statuses
//END_REGION

//REGION PROC_PPMeter_InitializePreviousHPAndHealEventCounter
// Set previous HP if it's not set
PROC
PROC_PPMeter_InitializePreviousHPAndHealEventCounter()
AND
DB_PartyMembers(_Character)
AND
NOT DB_PPMeter_PreviousHP(_Character, _)
AND
GetHitpoints(_Character, _HP)
THEN
DB_PPMeter_PreviousHP(_Character, _HP);

// Initialize heal events counter by 0 if there are no counter records
PROC
PROC_PPMeter_InitializePreviousHPAndHealEventCounter()
AND
DB_PartyMembers(_Character)
AND
NOT DB_PPMeter_EventsCounter(_Character, _)
THEN
DB_PPMeter_EventsCounter(_Character, 0);
//END_REGION


//REGION Initializations
IF
LevelGameplayStarted(_, _)
THEN
PROC_PPMeter_InitializePreviousHPAndHealEventCounter();

IF
CharacterJoinedParty(_)
THEN
PROC_PPMeter_InitializePreviousHPAndHealEventCounter();
//END_REGION


//REGION store actual HP value on HitpointsChanged and handle hp change
IF
HitpointsChanged((CHARACTER)_Character, _)
THEN
PROC_PPMeter_ProcessHPChanged(_Character);

IF
ShapeshiftedHitpointsChanged((CHARACTER)_Character, _)
THEN
PROC_PPMeter_ProcessHPChanged(_Character);

PROC
PROC_PPMeter_ProcessHPChanged((CHARACTER)_Character)
AND
DB_PartyMembers(_Character)
AND
GetHitpoints(_Character, _HPCurrent)
THEN
PROC_PPMeter_ProcessHPChange(_Character, _HPCurrent);

PROC
PROC_PPMeter_ProcessHPChange((CHARACTER)_Character, (INTEGER)_HPCurrent)
AND
DB_PPMeter_PreviousHP(_Character, _HPPrev)
AND
IntegerSubtract(_HPCurrent, _HPPrev, _DiffHP)
AND
_DiffHP > 0
THEN
PROC_PPMeter_WriteHealEvent(_Character, _DiffHP);
//DebugText(_Character, _msg);

PROC
PROC_PPMeter_ProcessHPChange((CHARACTER)_Character, (INTEGER)_HPCurrent)
AND
DB_PPMeter_PreviousHP(_Character, _HPPrev)
THEN
NOT DB_PPMeter_PreviousHP(_Character, _HPPrev);

PROC
PROC_PPMeter_ProcessHPChange((CHARACTER)_Character, (INTEGER)_HPCurrent)
THEN
DB_PPMeter_PreviousHP(_Character, _HPCurrent);

// Increase counter and write heal event with it
PROC
PROC_PPMeter_WriteHealEvent((CHARACTER)_Character, (INTEGER)_DiffHP)
AND
DB_PPMeter_EventsCounter(_Character, _CurrentCounter)
AND
QRY_PPMeterIsHighgestCounter(_Character, _CurrentCounter)  // Filter counters because we add new first and only then remove second
AND
IntegerSum(_CurrentCounter, 1, _NewCounter)
THEN
PROC_PPMeter_WriteHealEventWithCounter(_Character, _DiffHP, _CurrentCounter, _NewCounter);

PROC
PROC_PPMeter_WriteHealEventWithCounter((CHARACTER)_Character, (INTEGER)_HP, (INTEGER)_CurrentCounter, (INTEGER)_NewCounter)
THEN
DB_PPMeter_HealEvents(_Character, _HP, _NewCounter);
DB_PPMeter_EventsCounter(_Character, _NewCounter);

PROC
PROC_PPMeter_WriteHealEventWithCounter((CHARACTER)_Character, (INTEGER)_HP, (INTEGER)_CurrentCounter, (INTEGER)_NewCounter)
THEN
NOT DB_PPMeter_EventsCounter(_Character, _CurrentCounter);

// Set lifetime timer to eliminate this event if no HEAL status matched in given time
PROC
PROC_PPMeter_WriteHealEventWithCounter((CHARACTER)_Character, (INTEGER)_HP, (INTEGER)_CurrentCounter, (INTEGER)_NewCounter)
AND
ConcatenateGUID("heal_event_timer", _Character, _str1)
AND
ConcatenateInteger(_str1, _NewCounter, _str)
AND
DB_PPMeter_HealEventTimerValueMs(_TimerValueMs)
THEN
TimerLaunch(_str, _TimerValueMs);
DB_PPMeter_HealEventTimers(_Character, _str, _NewCounter);

IF
TimerFinished(_TimerString)
AND
DB_PPMeter_HealEventTimers(_Character, _TimerString, _EventID)
AND
DB_PPMeter_HealEvents(_Character, _HP, _EventID)
THEN
NOT DB_PPMeter_HealEvents(_Character, _HP, _EventID);

// Remove additional timer info in any case
IF
TimerFinished(_TimerString)
AND
DB_PPMeter_HealEventTimers(_Character, _TimerString, _EventID)
THEN
NOT DB_PPMeter_HealEventTimers(_Character, _TimerString, _EventID);
//END_REGION

//REGION Queries
QRY
QRY_PPMeterIsHighgestCounter((CHARACTER)_Character, (INTEGER)_ValueToCheck)
AND
DB_PPMeter_EventsCounter(_Character, _Value)
AND
_ValueToCheck >= _Value
THEN
DB_NOOP(1);

QRY
QRY_PPMeterIsEarliestHealEvent((CHARACTER)_Character, (INTEGER)_EventIDToCheck)
AND
DB_PPMeter_HealEvents(_Character, _, _EventID)
AND
_EventIDToCheck <= _EventID
THEN
DB_NOOP(1);
//END_REGION


//REGION Process HEAL status applied - only if HEAL target is in combat!
IF
StatusApplied((CHARACTER)_Target, "HEAL", (CHARACTER)_Caster, _)
AND
IsInCombat(_Target, 1)
AND
DB_PPMeter_HealEvents(_Target, _HealValue, _EventID)
AND
QRY_PPMeterIsEarliestHealEvent(_Target, _EventID)
AND
ConcatenateInteger("Healed by ", _HealValue, _msg1)
AND
Concatenate(_msg1, ", healer: ", _msg2)
AND
ConcatenateGUID(_msg2, _Caster, _msg)
THEN
PROC_PPMeterApplyHealingDone(_Caster, _HealValue);
PROC_PPMeterApplyHealingTaken(_Caster, _Target, _HealValue);
NOT DB_PPMeter_HealEvents(_Target, _HealValue, _EventID);

PROC
PROC_PPMeterApplyHealingDone((CHARACTER)_Healer, (INTEGER)_HealValue)
AND
DB_PPMeter_Lifetime(_Lifetime)  // Apply healing to every lifetime
AND
IntegerToReal(_HealValue, _HealValueReal)
THEN
PROC_PPMeterAdd(_Healer, _Lifetime, "Healing", _HealValueReal);

// Count External Healing Received
PROC
PROC_PPMeterApplyHealingTaken((CHARACTER)_Caster, (CHARACTER)_Target, (INTEGER)_HealValue)
AND
_Caster != _Target  // calculate only external healing
AND
DB_PPMeter_Lifetime(_Lifetime)  // Apply healing to every lifetime
AND
IntegerToReal(_HealValue, _HealValueReal)
THEN
PROC_PPMeterAdd(_Target, _Lifetime, "HealingTaken", _HealValueReal);

// Count self-healing
PROC
PROC_PPMeterApplyHealingTaken((CHARACTER)_Caster, (CHARACTER)_Target, (INTEGER)_HealValue)
AND
_Caster == _Target
AND
DB_PPMeter_Lifetime(_Lifetime)  // Apply healing to every lifetime
AND
IntegerToReal(_HealValue, _HealValueReal)
THEN
PROC_PPMeterAdd(_Target, _Lifetime, "HealingSelf", _HealValueReal);
//END_REGION


//REGION Debug
IF
TextEvent("healevents")
AND
DB_PPMeter_HealEvents(_Character, _Value, _Counter)
AND
ConcatenateInteger("Heal val: ", _Value, _msg1)
AND
Concatenate(_msg1, " Counter: ", _msg2)
AND
ConcatenateInteger(_msg2, _Counter, _msg)
THEN
DebugText(_Character, _msg);

IF
TextEvent("healeventtimers")
AND
DB_PPMeter_HealEventTimers(_Character, _TimerStr, _)
THEN
DebugText(_Character, _TimerStr);

IF
TextEvent("gethp")
AND
DB_PartyMembers(_Character)
AND
GetHitpoints(_Character, _HP)
AND
ConcatenateInteger("GetHitpoints() result: ", _HP, _msg)
THEN
DebugText(_Character, _msg);
//END_REGION

EXITSECTION

ENDEXITSECTION
ParentTargetEdge "Start"
