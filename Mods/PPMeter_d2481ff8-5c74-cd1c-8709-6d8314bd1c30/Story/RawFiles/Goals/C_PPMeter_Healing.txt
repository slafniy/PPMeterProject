Version 1
SubGoalCombiner SGC_AND
INITSECTION
// Store HitpointsChanged events which INCREASED hp (drop HP loss!) to match them with HEAL status later.
// Character - HealValue - EventID
NOT DB_PPMeter_HealEvents((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, 0, 0);

// Timer events list
// character - timer string - event id
NOT DB_PPMeter_HealEventTimers((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, "", 0);

// Timer value, ms - max allowed delay between actual HP increase and matching HEAL status
DB_PPMeter_HealEventTimerValueMs(100);
KBSECTION
//REGION store actual HP value on HitpointsChanged and handle hp change
IF
HitpointsChanged((CHARACTER)_Character, _)
THEN
PROC_PPMeter_ProcessHPChanged(_Character);

IF
ShapeshiftedHitpointsChanged((CHARACTER)_Character, _)
THEN
PROC_PPMeter_ProcessHPChanged(_Character);
//END_REGION


//REGION // Process StatusApplied - HEAL status applied - only if HEAL target is in combat!
IF
StatusApplied((CHARACTER)_Target, "HEAL", (CHARACTER)_Caster, _)
AND
IsInCombat(_Target, 1)
AND
DB_PPMeter_HealEvents(_Target, _HealValue, _EventID)
AND
QRY_PPMeterIsEarliestHealEvent(_Target, _EventID)
THEN
PROC_PPMeterApplyHealingDone(_Caster, _HealValue);
PROC_PPMeterApplyHealingTaken(_Caster, _Target, _HealValue);
NOT DB_PPMeter_HealEvents(_Target, _HealValue, _EventID);

PROC
PROC_PPMeterApplyHealingDone((CHARACTER)_Healer, (INTEGER)_HealValue)
AND
DB_PPMeter_Lifetime(_Lifetime)  // Apply healing to every lifetime
AND
IntegerToReal(_HealValue, _HealValueReal)
THEN
PROC_PPMeterAdd(_Healer, _Lifetime, "Healing", _HealValueReal);

// Count External Healing Received
PROC
PROC_PPMeterApplyHealingTaken((CHARACTER)_Caster, (CHARACTER)_Target, (INTEGER)_HealValue)
AND
_Caster != _Target  // calculate only external healing
AND
DB_PPMeter_Lifetime(_Lifetime)  // Apply healing to every lifetime
AND
IntegerToReal(_HealValue, _HealValueReal)
THEN
PROC_PPMeterAdd(_Target, _Lifetime, "HealingTaken", _HealValueReal);

// Count self-healing
PROC
PROC_PPMeterApplyHealingTaken((CHARACTER)_Caster, (CHARACTER)_Target, (INTEGER)_HealValue)
AND
_Caster == _Target
AND
DB_PPMeter_Lifetime(_Lifetime)  // Apply healing to every lifetime
AND
IntegerToReal(_HealValue, _HealValueReal)
THEN
PROC_PPMeterAdd(_Target, _Lifetime, "HealingSelf", _HealValueReal);
//END_REGION


/*//REGION // Rule:  Refresh calculated stats (see DB_PPMeter_CalculatedStats list)
IF
DB_PartyMembers(_Character)
AND
DB_PPMeter_CalculatedStats(_SourceStat, _TargetStat)
AND
DB_PPMeter_DataReal(_Character, _Lifetime, "RoundsCount", _Rounds)
AND
DB_PPMeter_DataReal(_Character, _Lifetime, _SourceStat, _SourceValue)
AND
_Rounds > 0.0
AND
RealDivide(_SourceValue, _Rounds, _TargetValue)
THEN
PROC_PPMeter_ReplaceInDB(_Character, _Lifetime, _TargetStat, _TargetValue);
//END_REGION*/


//REGION // PROC_PPMeter_ProcessHPChanged, PROC_PPMeter_ProcessHPChange, PROC_PPMeter_WriteHealEvent, PROC_PPMeter_WriteHealEventWithCounter
PROC
PROC_PPMeter_ProcessHPChanged((CHARACTER)_Character)
AND
DB_PartyMembers(_Character)
AND
GetHitpoints(_Character, _HPCurrent)
THEN
PROC_PPMeter_ProcessHPChange(_Character, _HPCurrent);

PROC
PROC_PPMeter_ProcessHPChange((CHARACTER)_Character, (INTEGER)_HPCurrent)
AND
DB_PPMeter_PreviousHP(_Character, _HPPrev)
AND
IntegerSubtract(_HPCurrent, _HPPrev, _DiffHP)
AND
_DiffHP > 0
THEN
PROC_PPMeter_WriteHealEvent(_Character, _DiffHP);

PROC
PROC_PPMeter_ProcessHPChange((CHARACTER)_Character, (INTEGER)_HPCurrent)
AND
DB_PPMeter_PreviousHP(_Character, _HPPrev)
THEN
NOT DB_PPMeter_PreviousHP(_Character, _HPPrev);

PROC
PROC_PPMeter_ProcessHPChange((CHARACTER)_Character, (INTEGER)_HPCurrent)
THEN
DB_PPMeter_PreviousHP(_Character, _HPCurrent);

// Increase counter and write heal event with it
PROC
PROC_PPMeter_WriteHealEvent((CHARACTER)_Character, (INTEGER)_DiffHP)
AND
DB_PPMeter_EventsCounter(_Character, _CurrentCounter)
AND
QRY_PPMeterIsHighgestCounter(_Character, _CurrentCounter)  // Filter counters because we add new first and only then remove second
AND
IntegerSum(_CurrentCounter, 1, _NewCounter)
THEN
PROC_PPMeter_WriteHealEventWithCounter(_Character, _DiffHP, _CurrentCounter, _NewCounter);

PROC
PROC_PPMeter_WriteHealEventWithCounter((CHARACTER)_Character, (INTEGER)_HP, (INTEGER)_CurrentCounter, (INTEGER)_NewCounter)
THEN
DB_PPMeter_HealEvents(_Character, _HP, _NewCounter);
DB_PPMeter_EventsCounter(_Character, _NewCounter);

PROC
PROC_PPMeter_WriteHealEventWithCounter((CHARACTER)_Character, (INTEGER)_HP, (INTEGER)_CurrentCounter, (INTEGER)_NewCounter)
THEN
NOT DB_PPMeter_EventsCounter(_Character, _CurrentCounter);

// Set lifetime timer to eliminate this event if no HEAL status matched in given time
PROC
PROC_PPMeter_WriteHealEventWithCounter((CHARACTER)_Character, (INTEGER)_HP, (INTEGER)_CurrentCounter, (INTEGER)_NewCounter)
AND
ConcatenateGUID("heal_event_timer", _Character, _str1)
AND
ConcatenateInteger(_str1, _NewCounter, _str)
AND
DB_PPMeter_HealEventTimerValueMs(_TimerValueMs)
THEN
TimerLaunch(_str, _TimerValueMs);
DB_PPMeter_HealEventTimers(_Character, _str, _NewCounter);

IF
TimerFinished(_TimerString)
AND
DB_PPMeter_HealEventTimers(_Character, _TimerString, _EventID)
AND
DB_PPMeter_HealEvents(_Character, _HP, _EventID)
THEN
NOT DB_PPMeter_HealEvents(_Character, _HP, _EventID);

// Remove additional timer info in any case
IF
TimerFinished(_TimerString)
AND
DB_PPMeter_HealEventTimers(_Character, _TimerString, _EventID)
THEN
NOT DB_PPMeter_HealEventTimers(_Character, _TimerString, _EventID);
//END_REGION


//REGION // Queries
QRY
QRY_PPMeterIsHighgestCounter((CHARACTER)_Character, (INTEGER)_ValueToCheck)
AND
DB_PPMeter_EventsCounter(_Character, _Value)
AND
_ValueToCheck >= _Value
THEN
DB_NOOP(1);

QRY
QRY_PPMeterIsEarliestHealEvent((CHARACTER)_Character, (INTEGER)_EventIDToCheck)
AND
DB_PPMeter_HealEvents(_Character, _, _EventID)
AND
_EventIDToCheck <= _EventID
THEN
DB_NOOP(1);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "Start"
