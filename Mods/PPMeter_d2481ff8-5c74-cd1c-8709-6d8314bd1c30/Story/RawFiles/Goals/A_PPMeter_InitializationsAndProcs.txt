Version 1
SubGoalCombiner SGC_AND
INITSECTION
// Data Lifetime enum
DB_PPMeter_Lifetime("Combat");
DB_PPMeter_Lifetime("Day");
DB_PPMeter_Lifetime("Level");
DB_PPMeter_Lifetime("Overall");

// Data stats type enum
DB_PPMeter_StatsType("RoundsCount");
DB_PPMeter_StatsType("Damage");
DB_PPMeter_StatsType("DPR");
DB_PPMeter_StatsType("DamageTaken");
DB_PPMeter_StatsType("DTPR");
DB_PPMeter_StatsType("Healing");
DB_PPMeter_StatsType("HPR");
DB_PPMeter_StatsType("HealingTaken");
DB_PPMeter_StatsType("HTPR");
DB_PPMeter_StatsType("HealingSelf");
DB_PPMeter_StatsType("SHPR");

/*
// Stats which should be calculated "per round avg"
// StatsTypeSource - StatsTypeTarget
DB_PPMeter_CalculatedStats("Damage", "DPR");
DB_PPMeter_CalculatedStats("DamageTaken", "DTPR");
DB_PPMeter_CalculatedStats("Healing", "HPR");
DB_PPMeter_CalculatedStats("HealingTaken", "HTPR");
DB_PPMeter_CalculatedStats("HealingSelf", "SHPR");*/

// Mapping to Resource Name (names are declared in Mods/PPMeter_d2481ff8-5c74-cd1c-8709-6d8314bd1c30/Localization/English/PPMeterTechnicalStrings.loca.xml)
// ResourceName - StatsType - Lifetime
DB_PPMeter_ResourceNames("PPMeterCombatRounds", "RoundsCount", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayRounds", "RoundsCount", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelRounds", "RoundsCount", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallRounds", "RoundsCount", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatDamage", "Damage", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayDamage", "Damage", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelDamage", "Damage", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallDamage", "Damage", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatDPR", "DPR", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayDPR", "DPR", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelDPR", "DPR", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallDPR", "DPR", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatDamageTaken", "DamageTaken", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayDamageTaken", "DamageTaken", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelDamageTaken", "DamageTaken", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallDamageTaken", "DamageTaken", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatDTPR", "DTPR", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayDTPR", "DTPR", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelDTPR", "DTPR", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallDTPR", "DTPR", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatHealing", "Healing", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayHealing", "Healing", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelHealing", "Healing", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallHealing", "Healing", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatHPR", "HPR", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayHPR", "HPR", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelHPR", "HPR", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallHPR", "HPR", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatHealingTaken", "HealingTaken", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayHealingTaken", "HealingTaken", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelHealingTaken", "HealingTaken", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallHealingTaken", "HealingTaken", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatHTPR", "HTPR", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayHTPR", "HTPR", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelHTPR", "HTPR", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallHTPR", "HTPR", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatHealingSelf", "HealingSelf", "Combat");
DB_PPMeter_ResourceNames("PPMeterDayHealingSelf", "HealingSelf", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelHealingSelf", "HealingSelf", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallHealingSelf", "HealingSelf", "Overall");

DB_PPMeter_ResourceNames("PPMeterCombatSHPR", "SHPR", "Combat");
DB_PPMeter_ResourceNames("PPMeterDaySHPR", "SHPR", "Day");
DB_PPMeter_ResourceNames("PPMeterLevelSHPR", "SHPR", "Level");
DB_PPMeter_ResourceNames("PPMeterOverallSHPR", "SHPR", "Overall");


// REAL Tables format: (CHARACTER)_Character, (STRING)_Lifetime, (STRING)_StatsType, (REAL)_Value
NOT DB_PPMeter_DataReal((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, "", "", 0.0);

// Simple counter to compare events to figure out which one is the first
NOT DB_PPMeter_EventsCounter((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, 0);

// Store previous HP value to figure out if character healed
// Character - HP
NOT DB_PPMeter_PreviousHP((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, 0);

// Save current resource boost to be able to remove it
// Character - ResourceName - Lifetime - StatsType - BoostString
NOT DB_PPMeter_CurrentResourceBoost((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, "", "", "", "");

// how much time to wait after LevelGameplayStarted event
DB_PPMeter_LevelGameplayStartedTimerMs(500);

KBSECTION
//REGION // handle LevelGameplayStarted - Initialize character data, refresh GUI
IF
LevelGameplayStarted(_, _)
AND
DB_PPMeter_LevelGameplayStartedTimerMs(_Timeout)
THEN
TimerLaunch("PPMeter_TimerLevelGameplayStarted", _Timeout);  // give some time for game to load everything

IF
TimerFinished("PPMeter_TimerLevelGameplayStarted")
AND
DB_PartyMembers(_Character)
THEN
PROC_PPMeter_InitializeCharacterData(_Character);

IF
TimerFinished("PPMeter_TimerLevelGameplayStarted")
AND
DB_PartyMembers(_Character)
THEN
PROC_PPMeter_UpdateCharacterGUI(_Character);
DebugText(_Character, "Initialization by PPMeter_TimerLevelGameplayStarted!");
//END_REGION


//REGION // handle CharacterJoinedParty - Initialize character data, refresh GUI
IF
CharacterJoinedParty(_Character)
THEN
PROC_PPMeter_InitializeCharacterData(_Character);

IF
CharacterJoinedParty(_Character)
THEN
PROC_PPMeter_UpdateCharacterGUI(_Character);
DebugText(_Character, "Initialization on CharacterJoinedParty");
//END_REGION


//REGION  // handle EnteredCombat - Initialize character data, refresh GUI
IF
EnteredCombat((CHARACTER)_Character, _)
AND
DB_PartyMembers(_Character)
THEN
PROC_PPMeter_InitializeCharacterData(_Character);

IF
EnteredCombat((CHARACTER)_Character, _)
AND
DB_PartyMembers(_Character)
THEN
PROC_PPMeter_UpdateCharacterGUI(_Character);
DebugText(_Character, "Initialization on EnteredCombat");
//END_REGION


//REGION  // PROC_PPMeter_InitializeCharacterData
PROC
PROC_PPMeter_InitializeCharacterData((CHARACTER)_Character)
THEN
PROC_PPMeter_InitDataReal(_Character);
PROC_PPMeter_InitEventsCounter(_Character);
PROC_PPMeter_InitPreviousHP(_Character);

PROC
PROC_PPMeter_InitDataReal((CHARACTER)_Character)
AND
DB_PPMeter_Lifetime(_Lifetime)
AND
DB_PPMeter_StatsType(_StatsType)
AND
NOT DB_PPMeter_DataReal(_Character, _Lifetime, _StatsType, _)
THEN
DB_PPMeter_DataReal(_Character, _Lifetime, _StatsType, 0.0);
//DebugText(_Character, "Initialized DataReal");

PROC
PROC_PPMeter_InitEventsCounter((CHARACTER)_Character)
AND
NOT DB_PPMeter_EventsCounter(_Character, _)
THEN
DB_PPMeter_EventsCounter(_Character, 0);
//DebugText(_Character, "Initialized EventsCounter");

PROC
PROC_PPMeter_InitPreviousHP((CHARACTER)_Character)
AND
NOT DB_PPMeter_PreviousHP(_Character, _)
AND
GetHitpoints(_Character, _HP)
THEN
DB_PPMeter_PreviousHP(_Character, _HP);
//DebugText(_Character, "Initialized PreviousHP");
//END_REGION


//REGION // PROC_PPMeter_UpdateCharacterGUI - write ALL character data to ActionResources, if something is missing
PROC
PROC_PPMeter_UpdateCharacterGUI((CHARACTER)_Character)
AND
DB_PPMeter_Lifetime(_Lifetime)
AND
DB_PPMeter_StatsType(_StatsType)
AND
DB_PPMeter_DataReal(_Character, _Lifetime, _StatsType, _Value)
AND
NOT DB_PPMeter_CurrentResourceBoost(_Character, _, _Lifetime, _StatsType, _)  // check there is no boost for this yet
THEN
PROC_PPMeter_WriteResource(_Character, _Lifetime, _StatsType, _Value);
//DebugText(_Character, "Refreshing all GUI data");
//END_REGION


//REGION // PROC_PPMeter_WriteResource - write data to ActionResource
// Clear old boost first!
PROC
PROC_PPMeter_WriteResource((CHARACTER)_Character, (STRING)_Lifetime, (STRING)_StatsType, (REAL)_Number)
AND
DB_PPMeter_ResourceNames(_ResourceName, _StatsType, _Lifetime)
AND
DB_PPMeter_CurrentResourceBoost(_Character, _ResourceName, _Lifetime, _StatsType, _BoostString)
THEN
RemoveBoosts(_Character, _BoostString, 0, "", _Character);
NOT DB_PPMeter_CurrentResourceBoost(_Character, _ResourceName, _Lifetime, _StatsType, _BoostString);

// Construct new boost string and apply it
PROC
PROC_PPMeter_WriteResource((CHARACTER)_Character, (STRING)_Lifetime, (STRING)_StatsType, (REAL)_Number)
AND
RealToString(_Number, _NumberStr)
AND
DB_PPMeter_ResourceNames(_ResourceName, _StatsType, _Lifetime)
AND
Concatenate("ActionResource(", _ResourceName, _str1)
AND
Concatenate(_str1, ",", _str2)
AND
Concatenate(_str2, _NumberStr, _str3)
AND
Concatenate(_str3, ",0)", _BoostStr)
THEN
DB_PPMeter_CurrentResourceBoost(_Character, _ResourceName, _Lifetime, _StatsType, _BoostStr);
AddBoosts(_Character, _BoostStr, "", _Character);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "Start"
