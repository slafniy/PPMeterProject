Version 1
SubGoalCombiner SGC_AND
INITSECTION
// Simple counter to compare events to figure out which one is the first
NOT DB_PPMeter_EventsCounter((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, 0);

// Store HitpointsChanged events which INCREASED hp (drop HP loss!) to match them with HEAL status later.
// Character - HealValue - EventID
NOT DB_PPMeter_HealEvents((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, 0, 0);

// Store previous HP % value to figure out if character healed
// Character - HP %
NOT DB_PPMeter_PreviousHPPercent((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, 0.0);

// HEAL statuses - technical statuses which indicate that caster healed target
//DB_PPMeter_HealingTechnicalStatuses("HEAL");
//DB_PPMeter_HealingTechnicalStatuses("PASSIVE_DISCIPLE_OF_LIFE");
KBSECTION
//REGION Initializations
// Set previous HP if it's not set - ONLY ONCE
IF
DB_PartyMembers(_Character)
AND
NOT DB_PPMeter_PreviousHPPercent(_Character, _)
AND
ConcatenateGUID("DB_PPMeter_PreviousHPPercent_OnlyOnce_", _Character, _OnlyOnceString)
AND
QRY_OnlyOnce(_OnlyOnceString)
AND
GetHitpointsPercentage(_Character, _HPPercent)
THEN
DB_PPMeter_PreviousHPPercent(_Character, _HPPercent);
DebugText(_Character, "DB_PPMeter_PreviousHPPercent is set!");

// Initialize heal events counter by 0 if there are no counter records
IF
DB_PartyMembers(_Character)
AND
NOT DB_PPMeter_EventsCounter(_Character, _)
THEN
DB_PPMeter_EventsCounter(_Character, 0);
//END_REGION


//REGION
IF
HitpointsChanged((CHARACTER)_Character, _HPPercentCurrent)
AND
DB_PartyMembers(_Character)
THEN
PROC_PPMeter_ProcessHPChange(_Character, _HPPercentCurrent);

PROC
PROC_PPMeter_ProcessHPChange((CHARACTER)_Character, (REAL)_HPPercentCurrent)
AND
DB_PPMeter_PreviousHPPercent(_Character, _HPPercentPrev)
AND
RealSubtract(_HPPercentCurrent, _HPPercentPrev, _DiffPercentHP)
AND
_DiffPercentHP > 0.0
AND
ConcatenateReal("Healed, value: ", _DiffPercentHP, _msg)
THEN
PROC_PPMeter_WriteHealEvent(_Character, _DiffPercentHP);
//DebugText(_Character, _msg);

PROC
PROC_PPMeter_ProcessHPChange((CHARACTER)_Character, (REAL)_HPPercentCurrent)
AND
DB_PPMeter_PreviousHPPercent(_Character, _HPPercentPrev)
THEN
NOT DB_PPMeter_PreviousHPPercent(_Character, _HPPercentPrev);

PROC
PROC_PPMeter_ProcessHPChange((CHARACTER)_Character, (REAL)_HPPercentCurrent)
THEN
DB_PPMeter_PreviousHPPercent(_Character, _HPPercentCurrent);

// Increase counter and write heal event with it
PROC
PROC_PPMeter_WriteHealEvent((CHARACTER)_Character, (REAL)_DiffPercentHP)
AND
DB_PPMeter_EventsCounter(_Character, _CurrentCounter)
AND
QRY_PPMeterIsHighgestCounter(_Character, _CurrentCounter)  // Filter counters because we add new first and only then remove second
AND
IntegerSum(_CurrentCounter, 1, _NewCounter)
AND
GetMaxHitpoints(_Character, _MaxHP)
AND
IntegerToReal(_MaxHP, _MaxHPReal)
AND
RealDivide(_DiffPercentHP, 100.0, _DiffHPPercentNumber)
AND
RealProduct(_MaxHPReal, _DiffHPPercentNumber, _DiffHPReal)
AND
RealSum(_DiffHPReal, 0.5, _DiffHPRealModified)  // To be sure it rounds UP!
AND
RealToInteger(_DiffHPRealModified, _DiffHP)
THEN
PROC_PPMeter_WriteHealEventWithCounter(_Character, _DiffHP, _CurrentCounter, _NewCounter);

PROC
PROC_PPMeter_WriteHealEventWithCounter((CHARACTER)_Character, (INTEGER)_HP, (INTEGER)_CurrentCounter, (INTEGER)_NewCounter)
THEN
DB_PPMeter_HealEvents(_Character, _HP, _NewCounter);
DB_PPMeter_EventsCounter(_Character, _NewCounter);

PROC
PROC_PPMeter_WriteHealEventWithCounter((CHARACTER)_Character, (INTEGER)_HP, (INTEGER)_CurrentCounter, (INTEGER)_NewCounter)
THEN
NOT DB_PPMeter_EventsCounter(_Character, _CurrentCounter);
//END_REGION

//REGION Queries
QRY
QRY_PPMeterIsHighgestCounter((CHARACTER)_Character, (INTEGER)_ValueToCheck)
AND
DB_PPMeter_EventsCounter(_Character, _Value)
AND
_ValueToCheck >= _Value
THEN
DB_NOOP(1);

QRY
QRY_PPMeterIsEarliestHealEvent((CHARACTER)_Character, (INTEGER)_EventIDToCheck)
AND
DB_PPMeter_HealEvents(_Character, _, _EventID)
AND
_EventIDToCheck <= _EventID
THEN
DB_NOOP(1);
//END_REGION


//REGION Process HEAL status applied
IF
StatusApplied((CHARACTER)_Target, "HEAL", (CHARACTER)_Caster, _)
AND
DB_PPMeter_HealEvents(_Target, _HealValue, _EventID)
AND
QRY_PPMeterIsEarliestHealEvent(_Target, _EventID)
AND
ConcatenateInteger("Healed by ", _HealValue, _msg1)
AND
Concatenate(_msg1, ", healer: ", _msg2)
AND
ConcatenateGUID(_msg2, _Caster, _msg)
THEN
PROC_PPMeterApplyHealingDone(_Caster, _HealValue);
DebugText(_Target, _msg);
NOT DB_PPMeter_HealEvents(_Target, _HealValue, _EventID);

PROC
PROC_PPMeterApplyHealingDone((CHARACTER)_Healer, (INTEGER)_HealValue)
AND
DB_PPMeter_Lifetime(_Lifetime)  // Apply healing to every lifetime
AND
IntegerToReal(_HealValue, _HealValueReal)
THEN
PROC_PPMeterAdd(_Healer, _Lifetime, "Healing", _HealValueReal);
//END_REGION


//REGION Debug
IF
TextEvent("healevents")
AND
DB_PPMeter_HealEvents(_Character, _Value, _Counter)
AND
ConcatenateInteger("Heal val: ", _Value, _msg1)
AND
Concatenate(_msg1, " Counter: ", _msg2)
AND
ConcatenateInteger(_msg2, _Counter, _msg)
THEN
DebugText(_Character, _msg);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "Start"
