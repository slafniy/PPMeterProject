Version 1
SubGoalCombiner SGC_AND
INITSECTION
// Simple counter to compare events to figure out which one is the first
NOT DB_PPMeter_EventsCounter((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, 0);

// Store HitpointsChanged events which INCREASED hp (drop HP loss!) to match them with HEAL status later.
// Character - HealValue - EventID
NOT DB_PPMeter_HealEvents((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, 0, 0);

// Store previous HP value to figure out if character healed
// Character - HP
NOT DB_PPMeter_PreviousHP((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, 0);

// Timer events list
// character - timer string - event id
NOT DB_PPMeter_HealEventTimers((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, "", 0);

// Timer value, ms - max allowed delay between actual HP increase and matching HEAL status
DB_PPMeter_HealEventTimerValueMs(100);
KBSECTION
//REGION Initializations
// Set previous HP if it's not set - ONLY ONCE
IF
DB_PartyMembers(_Character)
AND
NOT DB_PPMeter_PreviousHP(_Character, _)
AND
ConcatenateGUID("DB_PPMeter_PreviousHP_OnlyOnce_", _Character, _OnlyOnceString)
AND
QRY_OnlyOnce(_OnlyOnceString)
AND
GetHitpoints(_Character, _HP)
THEN
DB_PPMeter_PreviousHP(_Character, _HP);
DebugText(_Character, "DB_PPMeter_PreviousHP is set!");

// Initialize heal events counter by 0 if there are no counter records
IF
DB_PartyMembers(_Character)
AND
NOT DB_PPMeter_EventsCounter(_Character, _)
THEN
DB_PPMeter_EventsCounter(_Character, 0);
//END_REGION


//REGION store actual HP value on HitpointsChanged to calculate hp diff later
IF
HitpointsChanged((CHARACTER)_Character, _)
AND
DB_PartyMembers(_Character)
AND
GetHitpoints(_Character, _HPCurrent)
THEN
PROC_PPMeter_ProcessHPChange(_Character, _HPCurrent);

PROC
PROC_PPMeter_ProcessHPChange((CHARACTER)_Character, (INTEGER)_HPCurrent)
AND
DB_PPMeter_PreviousHP(_Character, _HPPrev)
AND
IntegerSubtract(_HPCurrent, _HPPrev, _DiffHP)
AND
_DiffHP > 0
THEN
PROC_PPMeter_WriteHealEvent(_Character, _DiffHP);
//DebugText(_Character, _msg);

PROC
PROC_PPMeter_ProcessHPChange((CHARACTER)_Character, (INTEGER)_HPCurrent)
AND
DB_PPMeter_PreviousHP(_Character, _HPPrev)
THEN
NOT DB_PPMeter_PreviousHP(_Character, _HPPrev);

PROC
PROC_PPMeter_ProcessHPChange((CHARACTER)_Character, (INTEGER)_HPCurrent)
THEN
DB_PPMeter_PreviousHP(_Character, _HPCurrent);

// Increase counter and write heal event with it
PROC
PROC_PPMeter_WriteHealEvent((CHARACTER)_Character, (INTEGER)_DiffHP)
AND
DB_PPMeter_EventsCounter(_Character, _CurrentCounter)
AND
QRY_PPMeterIsHighgestCounter(_Character, _CurrentCounter)  // Filter counters because we add new first and only then remove second
AND
IntegerSum(_CurrentCounter, 1, _NewCounter)
THEN
PROC_PPMeter_WriteHealEventWithCounter(_Character, _DiffHP, _CurrentCounter, _NewCounter);

PROC
PROC_PPMeter_WriteHealEventWithCounter((CHARACTER)_Character, (INTEGER)_HP, (INTEGER)_CurrentCounter, (INTEGER)_NewCounter)
AND
ConcatenateInteger("Healed event write, value: ", _HP, _msg1)
AND
Concatenate(_msg1, " ID: ", _msg2)
AND
ConcatenateInteger(_msg2, _NewCounter, _msg)
THEN
DB_PPMeter_HealEvents(_Character, _HP, _NewCounter);
DB_PPMeter_EventsCounter(_Character, _NewCounter);
DebugText(_Character, _msg);

PROC
PROC_PPMeter_WriteHealEventWithCounter((CHARACTER)_Character, (INTEGER)_HP, (INTEGER)_CurrentCounter, (INTEGER)_NewCounter)
THEN
NOT DB_PPMeter_EventsCounter(_Character, _CurrentCounter);

// Set lifetime timer to eliminate this event if no HEAL status matched in given time
PROC
PROC_PPMeter_WriteHealEventWithCounter((CHARACTER)_Character, (INTEGER)_HP, (INTEGER)_CurrentCounter, (INTEGER)_NewCounter)
AND
ConcatenateGUID("heal_event_timer", _Character, _str1)
AND
ConcatenateInteger(_str1, _NewCounter, _str)
AND
DB_PPMeter_HealEventTimerValueMs(_TimerValueMs)
THEN
TimerLaunch(_str, _TimerValueMs);
DebugText(_Character, _str);
DB_PPMeter_HealEventTimers(_Character, _str, _NewCounter);

IF
TimerFinished(_TimerString)
AND
DB_PPMeter_HealEventTimers(_Character, _TimerString, _EventID)
AND
DB_PPMeter_HealEvents(_Character, _HP, _EventID)
AND
ConcatenateInteger("Heal event removed by timer, ID: ", _EventID, _msg)
THEN
NOT DB_PPMeter_HealEvents(_Character, _HP, _EventID);
DebugText(_Character, _msg);

// Remove additional timer info in any case
IF
TimerFinished(_TimerString)
AND
DB_PPMeter_HealEventTimers(_Character, _TimerString, _EventID)
THEN
NOT DB_PPMeter_HealEventTimers(_Character, _TimerString, _EventID);
//END_REGION

//REGION Queries
QRY
QRY_PPMeterIsHighgestCounter((CHARACTER)_Character, (INTEGER)_ValueToCheck)
AND
DB_PPMeter_EventsCounter(_Character, _Value)
AND
_ValueToCheck >= _Value
THEN
DB_NOOP(1);

QRY
QRY_PPMeterIsEarliestHealEvent((CHARACTER)_Character, (INTEGER)_EventIDToCheck)
AND
DB_PPMeter_HealEvents(_Character, _, _EventID)
AND
_EventIDToCheck <= _EventID
THEN
DB_NOOP(1);
//END_REGION


//REGION Process HEAL status applied - only if HEAL target is in combat!
IF
StatusApplied((CHARACTER)_Target, "HEAL", (CHARACTER)_Caster, _)
AND
IsInCombat(_Target, 1)
AND
DB_PPMeter_HealEvents(_Target, _HealValue, _EventID)
AND
QRY_PPMeterIsEarliestHealEvent(_Target, _EventID)
AND
ConcatenateInteger("Healed by ", _HealValue, _msg1)
AND
Concatenate(_msg1, ", healer: ", _msg2)
AND
ConcatenateGUID(_msg2, _Caster, _msg)
THEN
PROC_PPMeterApplyHealingDone(_Caster, _HealValue);
PROC_PPMeterApplyHealingTaken(_Caster, _Target, _HealValue);
DebugText(_Target, _msg);
NOT DB_PPMeter_HealEvents(_Target, _HealValue, _EventID);

PROC
PROC_PPMeterApplyHealingDone((CHARACTER)_Healer, (INTEGER)_HealValue)
AND
DB_PPMeter_Lifetime(_Lifetime)  // Apply healing to every lifetime
AND
IntegerToReal(_HealValue, _HealValueReal)
THEN
PROC_PPMeterAdd(_Healer, _Lifetime, "Healing", _HealValueReal);

PROC
PROC_PPMeterApplyHealingTaken((CHARACTER)_Caster, (CHARACTER)_Target, (INTEGER)_HealValue)
AND
_Caster != _Target  // calculate only external healing
AND
DB_PPMeter_Lifetime(_Lifetime)  // Apply healing to every lifetime
AND
IntegerToReal(_HealValue, _HealValueReal)
THEN
PROC_PPMeterAdd(_Target, _Lifetime, "HealingTaken", _HealValueReal);
//END_REGION


//REGION Debug
IF
TextEvent("healevents")
AND
DB_PPMeter_HealEvents(_Character, _Value, _Counter)
AND
ConcatenateInteger("Heal val: ", _Value, _msg1)
AND
Concatenate(_msg1, " Counter: ", _msg2)
AND
ConcatenateInteger(_msg2, _Counter, _msg)
THEN
DebugText(_Character, _msg);

IF
TextEvent("healeventtimers")
AND
DB_PPMeter_HealEventTimers(_Character, _TimerStr, _)
THEN
DebugText(_Character, _TimerStr);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "Start"
