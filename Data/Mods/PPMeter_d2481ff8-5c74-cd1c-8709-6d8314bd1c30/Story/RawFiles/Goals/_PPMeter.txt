Version 1
SubGoalCombiner SGC_AND
INITSECTION
// An attempt to re-create Recount :) kinda...

// Store this data to calculate damage:
// 1. For each party member store damage dealt   per combat   DB_PPMeter_LastCombatTotalDamage((CHARACTER)_Character, (INTEGER)_Damage)
// 2.                                             per level   DB_PPMeter_LastLevelTotalDamage((CHARACTER)_Character, (INTEGER)_Damage)
// 3.                                               overall   DB_PPMeter_OverallDamage((CHARACTER)_Character, (INTEGER)_Damage)
// 4.                                               per day   DB_PPMeter_LastDayDamage((CHARACTER)_Character, (INTEGER)_Damage)

// And this data to calculate average DPR (damage per round)
// 1. For each party member store combat rounds completed count  per combat   DB_PPMeter_LastCombatRounds((CHARACTER)_Character, (INTEGER)_Count)
// 2.                                                             per level   DB_PPMeter_LastLevelRounds((CHARACTER)_Character, (INTEGER)_Count)
// 3.                                                               overall   DB_PPMeter_OverallRounds((CHARACTER)_Character, (INTEGER)_Count)
// 4.                                                               per day   DB_PPMeter_LastDayRounds((CHARACTER)_Character, (INTEGER)_Count)
KBSECTION
//REGION PROC_EnsureCreated_DB_PPMeter_LastCombatTotalDamage
PROC
PROC_EnsureCreated_DB_PPMeter_LastCombatTotalDamage((CHARACTER)_Character)
AND
NOT DB_PPMeter_LastCombatTotalDamage(_Character, _)
THEN
DB_PPMeter_LastCombatTotalDamage(_Character, 0);
DebugText(_Character, "NEW DB COMBAT");
//END_REGION

//REGION PROC_EnsureCreated_DB_PPMeter_LastLevelTotalDamage
PROC
PROC_EnsureCreated_DB_PPMeter_LastLevelTotalDamage((CHARACTER)_Character)
AND
NOT DB_PPMeter_LastLevelTotalDamage(_Character, _)
THEN
DB_PPMeter_LastLevelTotalDamage(_Character, 0);
DebugText(_Character, "NEW DB LEVEL");
//END_REGION

//REGION PROC_EnsureCreated_DB_PPMeter_LastDayDamage
PROC
PROC_EnsureCreated_DB_PPMeter_LastDayDamage((CHARACTER)_Character)
AND
NOT DB_PPMeter_LastDayDamage((CHARACTER)_Character, _)
THEN
DB_PPMeter_LastDayDamage(_Character, 0);
DebugText(_Character, "NEW DB DAY");
//END_REGION

//REGION PROC_EnsureCreated_DB_PPMeter_OverallDamage
PROC
PROC_EnsureCreated_DB_PPMeter_OverallDamage((CHARACTER)_Character)
AND
NOT DB_PPMeter_OverallDamage(_Character, _)
THEN
DB_PPMeter_OverallDamage(_Character, 0);
DebugText(_Character, "NEW DB OVERALL");
//END_REGION

//REGION PROC_SetZero_DB_PPMeter_LastCombatTotalDamage
PROC
PROC_SetZero_DB_PPMeter_LastCombatTotalDamage((CHARACTER)_Character)
AND
DB_PPMeter_LastCombatTotalDamage(_Character, _Damage)
THEN
NOT DB_PPMeter_LastCombatTotalDamage(_Character, _Damage);
DB_PPMeter_LastCombatTotalDamage(_Character, 0);
DebugText(_Character, "ZERO - COMBAT");
//END_REGION

//REGION PROC_SetZero_DB_PPMeter_LastLevelTotalDamage
PROC
PROC_SetZero_DB_PPMeter_LastLevelTotalDamage((CHARACTER)_Character)
AND
DB_PPMeter_LastLevelTotalDamage(_Character, _Damage)
THEN
NOT DB_PPMeter_LastLevelTotalDamage(_Character, _Damage);
DB_PPMeter_LastLevelTotalDamage(_Character, 0);
DebugText(_Character, "ZERO - LEVEL");
//END_REGION

//REGION PROC_SetZero_DB_PPMeter_LastDayDamage
PROC
PROC_SetZero_DB_PPMeter_LastDayDamage((CHARACTER)_Character)
AND
DB_PPMeter_LastDayDamage(_Character, _Damage)
THEN
NOT DB_PPMeter_LastDayDamage(_Character, _Damage);
DB_PPMeter_LastDayDamage(_Character, 0);
DebugText(_Character, "ZERO - DAY");
//END_REGION

//REGION PROC_PPMeter_AddDamage
PROC
PROC_PPMeter_AddDamage((CHARACTER)_Character, (INTEGER)_Damage)
AND
DB_PPMeter_LastCombatTotalDamage((CHARACTER)_Character, (INTEGER)_OldCombat)
AND
DB_PPMeter_LastLevelTotalDamage((CHARACTER)_Character, (INTEGER)_OldLevel)
AND
DB_PPMeter_LastDayDamage((CHARACTER)_Character, (INTEGER)_OldDay)
AND
DB_PPMeter_OverallDamage((CHARACTER)_Character, (INTEGER)_OldOverall)
AND
IntegerSum(_Damage, _OldCombat, _NewCombat)
AND
IntegerSum(_Damage, _OldDay, _NewDay)
AND
IntegerSum(_Damage, _OldLevel, _NewLevel)
AND
IntegerSum(_Damage, _OldOverall, _NewOverall)
THEN

NOT DB_PPMeter_LastCombatTotalDamage((CHARACTER)_Character, (INTEGER)_OldCombat);
DB_PPMeter_LastCombatTotalDamage((CHARACTER)_Character, (INTEGER)_NewCombat);

NOT DB_PPMeter_LastDayDamage((CHARACTER)_Character, (INTEGER)_OldDay);
DB_PPMeter_LastDayDamage((CHARACTER)_Character, (INTEGER)_NewDay);

NOT DB_PPMeter_LastLevelTotalDamage((CHARACTER)_Character, (INTEGER)_OldLevel);
DB_PPMeter_LastLevelTotalDamage((CHARACTER)_Character, (INTEGER)_NewLevel);

NOT DB_PPMeter_OverallDamage((CHARACTER)_Character, (INTEGER)_OldOverall);
DB_PPMeter_OverallDamage((CHARACTER)_Character, (INTEGER)_NewOverall);
//END_REGION


//REGION Add PPMeterToggleable passive to each party member if it does not have it
IF
DB_PartyMembers((CHARACTER)_Character)
AND
HasPassive(_Character, "PPMeterToggleable", 0)
THEN
AddPassive(_Character, "PPMeterToggleable");
//END_REGION

//REGION On Long Rest
IF
LongRestFinished()
AND
DB_PartOfTheTeam(_Character)  // not DB_PartyMembers because we want to handle camp fellas too
THEN
PROC_EnsureCreated_DB_PPMeter_LastDayDamage(_Character);
PROC_SetZero_DB_PPMeter_LastDayDamage(_Character);
//END_REGION

//REGION On leveled up reset damage on level
IF
LeveledUp((CHARACTER)_Character)
AND
DB_PartyMembers(_Character)
THEN
PROC_EnsureCreated_DB_PPMeter_LastLevelTotalDamage(_Character);
PROC_SetZero_DB_PPMeter_LastLevelTotalDamage(_Character);
//END_REGION

//REGION On new combat set DB total damage to 0 and ensure DBs per level, overall and day exists
IF
EnteredCombat((CHARACTER)_Character, _)
AND
DB_PartyMembers(_Character)
THEN
// Make sure we have databases for damage data
PROC_EnsureCreated_DB_PPMeter_LastCombatTotalDamage(_Character);
PROC_EnsureCreated_DB_PPMeter_LastLevelTotalDamage(_Character);
PROC_EnsureCreated_DB_PPMeter_OverallDamage(_Character);
PROC_EnsureCreated_DB_PPMeter_LastDayDamage(_Character);

PROC_SetZero_DB_PPMeter_LastCombatTotalDamage(_Character);
//END_REGION

//REGION Handle damage dealt
IF
AttackedBy((GUIDSTRING)_Defender, (CHARACTER)_AttackerOwner, (GUIDSTRING)_Attacker, (STRING)_DamageType, (INTEGER)_DamageAmount, (STRING)_DamageCause, (INTEGER)_StoryActionID)
AND
DB_PartyMembers(_AttackerOwner)
AND
_DamageAmount > 0
THEN
PROC_PPMeter_AddDamage((CHARACTER)_AttackerOwner, (INTEGER)_DamageAmount);
//END_REGION

//REGION For debugging - make everyone say their stats
IF
TextEvent("pp")
AND
DB_PPMeter_LastCombatTotalDamage((CHARACTER)_Character, (INTEGER)_Damage)
AND
DB_PartyMembers(_Character)
AND
ConcatenateInteger("My damage in combat is ", _Damage, _msg)
THEN
DebugText(_Character, _msg);
//END_REGION

//REGION ShowOff spell casted - make caster say its stats
IF
CastedSpell(_Character, "PPMeterShowOff", _, _, _)
AND
DB_PPMeter_LastCombatTotalDamage((CHARACTER)_Character, (INTEGER)_DamageCombat)
AND
ConcatenateInteger("COMBAT: ", _DamageCombat, _msgCombat)
AND
DB_PPMeter_LastDayDamage((CHARACTER)_Character, (INTEGER)_DamageDay)
AND
ConcatenateInteger("DAY: ", _DamageDay, _msgDay)
AND
DB_PPMeter_LastLevelTotalDamage((CHARACTER)_Character, (INTEGER)_DamageLevel)
AND
ConcatenateInteger("LEVEL: ", _DamageLevel, _msgLevel)
AND
DB_PPMeter_OverallDamage((CHARACTER)_Character, (INTEGER)_DamageOverall)
AND
ConcatenateInteger("OVERALL: ", _DamageOverall, _msgOverall)
THEN
DebugText(_Character, _msgCombat);
DebugText(_Character, _msgDay);
DebugText(_Character, _msgLevel);
DebugText(_Character, _msgOverall);
//END_REGION

EXITSECTION

ENDEXITSECTION
ParentTargetEdge "Start"
