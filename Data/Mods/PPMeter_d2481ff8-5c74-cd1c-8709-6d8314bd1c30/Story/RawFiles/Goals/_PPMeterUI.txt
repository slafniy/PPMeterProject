Version 1
SubGoalCombiner SGC_AND
INITSECTION
// Mapping to Status Effects
// "Status" should be declared as "StatusType" "BOOST" in game "Stats" txt file
// Status - PositionInString - StatsType - Lifetime
DB_PPMeter_StatusEffects("PPMeter_DamageCombat_d1", 1, "Damage", "Combat");
DB_PPMeter_StatusEffects("PPMeter_DamageCombat_d2", 2, "Damage", "Combat");
DB_PPMeter_StatusEffects("PPMeter_DamageCombat_d3", 3, "Damage", "Combat");
DB_PPMeter_StatusEffects("PPMeter_DamageCombat_d4", 4, "Damage", "Combat");
DB_PPMeter_StatusEffects("PPMeter_DamageCombat_d5", 5, "Damage", "Combat");
DB_PPMeter_StatusEffects("PPMeter_DamageCombat_d6", 6, "Damage", "Combat");
DB_PPMeter_StatusEffects("PPMeter_DamageCombat_d7", 7, "Damage", "Combat");

DB_PPMeter_StatusEffects("PPMeter_DamageDay_d1", 1, "Damage", "Day");
DB_PPMeter_StatusEffects("PPMeter_DamageDay_d2", 2, "Damage", "Day");
DB_PPMeter_StatusEffects("PPMeter_DamageDay_d3", 3, "Damage", "Day");
DB_PPMeter_StatusEffects("PPMeter_DamageDay_d4", 4, "Damage", "Day");
DB_PPMeter_StatusEffects("PPMeter_DamageDay_d5", 5, "Damage", "Day");
DB_PPMeter_StatusEffects("PPMeter_DamageDay_d6", 6, "Damage", "Day");
DB_PPMeter_StatusEffects("PPMeter_DamageDay_d7", 7, "Damage", "Day");

DB_PPMeter_StatusEffects("PPMeter_DamageLevel_d1", 1, "Damage", "Level");
DB_PPMeter_StatusEffects("PPMeter_DamageLevel_d2", 2, "Damage", "Level");
DB_PPMeter_StatusEffects("PPMeter_DamageLevel_d3", 3, "Damage", "Level");
DB_PPMeter_StatusEffects("PPMeter_DamageLevel_d4", 4, "Damage", "Level");
DB_PPMeter_StatusEffects("PPMeter_DamageLevel_d5", 5, "Damage", "Level");
DB_PPMeter_StatusEffects("PPMeter_DamageLevel_d6", 6, "Damage", "Level");
DB_PPMeter_StatusEffects("PPMeter_DamageLevel_d7", 7, "Damage", "Level");

DB_PPMeter_StatusEffects("PPMeter_DamageOverall_d1", 1, "Damage", "Overall");
DB_PPMeter_StatusEffects("PPMeter_DamageOverall_d2", 2, "Damage", "Overall");
DB_PPMeter_StatusEffects("PPMeter_DamageOverall_d3", 3, "Damage", "Overall");
DB_PPMeter_StatusEffects("PPMeter_DamageOverall_d4", 4, "Damage", "Overall");
DB_PPMeter_StatusEffects("PPMeter_DamageOverall_d5", 5, "Damage", "Overall");
DB_PPMeter_StatusEffects("PPMeter_DamageOverall_d6", 6, "Damage", "Overall");
DB_PPMeter_StatusEffects("PPMeter_DamageOverall_d7", 7, "Damage", "Overall");



// Converter from digit we want in UI to Duration
// In XAML "Duration" binding values are integers calculated as Duration / 6 sec (one game turn time)
// So e.g. -600 will be -100 in GUI, -648 translates into -108
// For each Lifetime and StatType using its own duration range
// Digit - Converted - StatsType - Lifetime

// -100 -109
DB_PPMeter_DigitStrToDuration("0", -600.0, "Damage", "Combat");
DB_PPMeter_DigitStrToDuration("1", -606.0, "Damage", "Combat");
DB_PPMeter_DigitStrToDuration("2", -612.0, "Damage", "Combat");
DB_PPMeter_DigitStrToDuration("3", -618.0, "Damage", "Combat");
DB_PPMeter_DigitStrToDuration("4", -624.0, "Damage", "Combat");
DB_PPMeter_DigitStrToDuration("5", -630.0, "Damage", "Combat");
DB_PPMeter_DigitStrToDuration("6", -636.0, "Damage", "Combat");
DB_PPMeter_DigitStrToDuration("7", -642.0, "Damage", "Combat");
DB_PPMeter_DigitStrToDuration("8", -648.0, "Damage", "Combat");
DB_PPMeter_DigitStrToDuration("9", -654.0, "Damage", "Combat");

// -110 -119
DB_PPMeter_DigitStrToDuration("0", -660.0, "Damage", "Overall");
DB_PPMeter_DigitStrToDuration("1", -666.0, "Damage", "Overall");
DB_PPMeter_DigitStrToDuration("2", -672.0, "Damage", "Overall");
DB_PPMeter_DigitStrToDuration("3", -678.0, "Damage", "Overall");
DB_PPMeter_DigitStrToDuration("4", -684.0, "Damage", "Overall");
DB_PPMeter_DigitStrToDuration("5", -690.0, "Damage", "Overall");
DB_PPMeter_DigitStrToDuration("6", -696.0, "Damage", "Overall");
DB_PPMeter_DigitStrToDuration("7", -702.0, "Damage", "Overall");
DB_PPMeter_DigitStrToDuration("8", -708.0, "Damage", "Overall");
DB_PPMeter_DigitStrToDuration("9", -714.0, "Damage", "Overall");

// -120 -129
DB_PPMeter_DigitStrToDuration("0", -720.0, "Damage", "Level");
DB_PPMeter_DigitStrToDuration("1", -726.0, "Damage", "Level");
DB_PPMeter_DigitStrToDuration("2", -732.0, "Damage", "Level");
DB_PPMeter_DigitStrToDuration("3", -738.0, "Damage", "Level");
DB_PPMeter_DigitStrToDuration("4", -744.0, "Damage", "Level");
DB_PPMeter_DigitStrToDuration("5", -750.0, "Damage", "Level");
DB_PPMeter_DigitStrToDuration("6", -756.0, "Damage", "Level");
DB_PPMeter_DigitStrToDuration("7", -762.0, "Damage", "Level");
DB_PPMeter_DigitStrToDuration("8", -768.0, "Damage", "Level");
DB_PPMeter_DigitStrToDuration("9", -774.0, "Damage", "Level");

// -130 -139
DB_PPMeter_DigitStrToDuration("0", -780.0, "Damage", "Day");
DB_PPMeter_DigitStrToDuration("1", -786.0, "Damage", "Day");
DB_PPMeter_DigitStrToDuration("2", -792.0, "Damage", "Day");
DB_PPMeter_DigitStrToDuration("3", -798.0, "Damage", "Day");
DB_PPMeter_DigitStrToDuration("4", -804.0, "Damage", "Day");
DB_PPMeter_DigitStrToDuration("5", -810.0, "Damage", "Day");
DB_PPMeter_DigitStrToDuration("6", -816.0, "Damage", "Day");
DB_PPMeter_DigitStrToDuration("7", -822.0, "Damage", "Day");
DB_PPMeter_DigitStrToDuration("8", -828.0, "Damage", "Day");
DB_PPMeter_DigitStrToDuration("9", -834.0, "Damage", "Day");


KBSECTION
//REGION Write  damage to statuses
PROC
PROC_WriteDamageStatuses((CHARACTER)_Character, (STRING)_Lifetime, (INTEGER)_Number)
AND
IntegerToString(_Number, _NumberStr)
THEN
PROC_ClearDamageStatuses(_Character, _Lifetime);
PROC_WriteOneByOne(_Character, _Lifetime, _NumberStr);

PROC
PROC_WriteOneByOne((CHARACTER)_Character, (STRING)_Lifetime, (STRING)_NumberStr)
AND
DB_PPMeter_StatusEffects(_Status, _Start, _StatsType, _Lifetime)
AND
Substring(_NumberStr, _Start, 1, _DigitStr)
AND
_DigitStr != ""
AND
DB_PPMeter_DigitStrToDuration(_DigitStr, _Duration, _StatsType, _Lifetime)
THEN
ApplyStatus(_Character, _Status, _Duration, 1, _Character);
//END_REGION


//REGION clear statuses for given lifetime
PROC
PROC_ClearDamageStatuses((CHARACTER)_Character, (STRING)_Lifetime)
AND
DB_PPMeter_StatusEffects(_Status, _, _, _Lifetime)
AND
HasAppliedStatus(_Character, _Status, 1)
THEN
RemoveStatus(_Character, _Status, _Character);
//END_REGION


//REGION Update UI damage(set statuses) - looking if DB changed
IF
DB_PartyMembers(_Character)
AND
DB_PPMeter_DataInteger(_Character, _LifeTime, _StatsName, _Value)
AND
_StatsName == "Damage"
THEN
PROC_WriteDamageStatuses(_Character, _LifeTime, _Value);
//END_REGION

//REGION // PROC Force apply damage UI statuses
PROC
PROC_PPMeter_ForseUpdateStatuses((CHARACTER)_Character)
AND
DB_PPMeter_DataInteger(_Character, _LifeTime, _StatsName, _Value)
AND
_StatsName == "Damage"
THEN
DebugText(_Character, "forced update");
PROC_WriteDamageStatuses(_Character, _LifeTime, _Value);
//END_REGION


//REGION // DEBUG: on "oe pp" command - say all stats
IF
TextEvent("pp")
AND
DB_PartyMembers(_Character)
AND
DB_PPMeter_DataInteger((CHARACTER)_Character, _Lifetime, "Damage", _Val1)
AND
DB_PPMeter_DataInteger((CHARACTER)_Character, _Lifetime, "RoundsCount", _Val2)
AND
ConcatenateGUID("", _Character, _msg1)
AND
Concatenate(_msg1, _Lifetime, _msg2)
AND
Concatenate(_msg2, " Rounds: ", _msg3)
AND
ConcatenateInteger(_msg3, _Val2, _msg4)
AND
Concatenate(_msg4, " Damage: " , _msg5)
AND
ConcatenateInteger(_msg5, _Val1, _msg)
AND
IntegerToReal(_Val1, _Val1Real)
THEN
DebugText(_Character, _msg);


IF
TextEvent("pp")
AND
DB_PartyMembers(_Character)
AND
NOT DB_PPMeter_DataInteger((CHARACTER)_Character, _, "Damage", _)
THEN
DebugText(_Character, "I need to hit someone first!");

IF
TextEvent("pp")
AND
DB_PartyMembers(_Character)
AND
NOT DB_PPMeter_DataInteger((CHARACTER)_Character, _, "RoundsCount", _)
THEN
DebugText(_Character, "I need to end turn first!");
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "Start"
